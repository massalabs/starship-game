[package]
name = "game_decentralized_bevy"
version = "0.1.0"
authors = []
edition = "2021"
resolver = "2"
# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
rand = "0.8.5"
uuid = { version = "1.1.2", features = ["serde", "v4"] }
wasm-bindgen = "0.2.81"
wasm-bindgen-cli = "0.2.81"
wasm-bindgen-futures = "0.4.33"
wasm-rs-shared-channel = "0.1.0"
js-sys = "0.3.60"
bevy = { version = "0.8.1" }
#getrandom = { version="0.2", features=["wasm-bindgen"] }
#bevy_rapier2d = { version = "0.16.2",  features = [ "wasm-bindgen" ] }
#tokio = { version = "1.21.2" }
serde = "1.0.145"
serde_json = "1.0.85"

[dev-dependencies]
wasm-bindgen-test = "0.3.33"

[dependencies.web-sys]
version = "0.3.60"
features = [
  'MessageChannel',
  'KeyboardEvent',
  'CanvasRenderingContext2d',
  'Document',
  'Element',
  'HtmlCanvasElement',
  'Window',
]

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
#console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
#wee_alloc = { version = "0.4.5", optional = true }

[profile.dev]
opt-level = 1

[profile.release]
# less code to include into binary
panic = 'abort'
# optimization over all codebase ( better optimization, slower build )
codegen-units = 1
# optimization for size ( more aggressive )
opt-level = 'z'
# optimization for size
# opt-level = 's'
# link time optimization using using whole-program analysis
lto = true

[profile.wasm-release]
# Use release profile as default values
inherits = "release"

# Optimize with size in mind, also try "s", sometimes it is better.
# This doesn't increase compilation times compared to -O3, great improvements
opt-level = "z"

# Do a second optimization pass removing duplicate or unused code from dependencies.
# Slows compile times, marginal improvements
lto = "fat"

# When building crates, optimize larger chunks at a time
# Slows compile times, marginal improvements
codegen-units = 1

